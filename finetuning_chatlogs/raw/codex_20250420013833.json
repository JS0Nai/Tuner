{
  "source": "codex-help.txt",
  "title": "CodeX",
  "date": "2025-04-20T01:38:33.132493",
  "content": "\n1. Global install (once)\nnpm install -g @openai/codex\n# or\nyarn global add @openai/codex\n\n2. Persisting your API key\necho 'export OPENAI_API_KEY=\"your-api-key-here\"' >> ~/.zshrc\necho 'export OPENAI_API_KEY=\"your-api-key-here\"' >> ~/.bash_profile\n\n\n3. Reload your shell\nsource ~/.zshrc   # or source ~/.bash_profile\n\n4. Verify codex is available\ncodex --help\n\n\n\nNow echo $OPENAI_API_KEY should show your key.\n\nIn ANY terminal:\n\n'''bash\ncodex\n'''\n\ncodex \"explain this codebase to me\"\ncodex --approval-mode full-auto \"create the fanciest todo-list app\"\n\n\nPer‑command flag\nJust add the --model (or -m) option when you invoke Codex:\n\ncodex --model o4-mini-high \"your prompt here\"\n# or shorthand\ncodex -m o4-mini-high \"refactor src/auth.js\"\n\nDefault in your config file\nIf you’d like o4‑mini‑high every time, add it to ~/.codex/config.yaml:\n\nmodel: o4-mini-high\n\n\n\n\nKey Flags & Modes\n\t•\tModel selection (--model or -m): defaults to o4-mini, but you can use any supported model (e.g., gpt-4o).\n\t•\tApproval mode (--approval-mode or -a):\n\t•\tsuggest (default): shows proposed changes for your OK\n\t•\tauto-edit: applies patches automatically, but still asks before shell commands\n\t•\tfull-auto: no prompts; everything runs sandboxed without network access  \n\t•\tQuiet / JSON output (--quiet or -q): suppresses the interactive UI or outputs machine‑readable JSON for CI pipelines.  \n\n\n\nRun Codex headlessly in your GitHub Actions or other CI:\n\n- name: Update changelog via Codex\n  run: |\n    npm install -g @openai/codex\n    export OPENAI_API_KEY=\"${{ secrets.OPENAI_KEY }}\"\n    codex -a auto-edit --quiet \"update CHANGELOG for next release\"\n\nSet CODEX_QUIET_MODE=1 if you need further silencing of UI noise\n\n\n\nAdvanced Configuration & Memory\n\n\t•\tProject docs & memory:\nCodex merges instructions from ~/.codex/instructions.md (your global guidance), plus codex.md in your repo root or current directory. Disable with --no-project-doc.  \n\n\t•\tConfig file at ~/.codex/config.yaml, for defaults like:\nmodel: o4-mini\nfullAutoErrorMode: ask-user\n\n\nDocker Container\n\t•\tSpin up a lightweight container:\n\ndocker run --rm -it node:20 bash\nnpm install -g @openai/codex\nexport OPENAI_API_KEY=\"…\"\ncodex\n\n\n\t•\tKeeps your host system clean and reproducible.\n\n\t3.\tIntegrated Development Environments\n\t•\tVS Code: open the integrated terminal and invoke codex.\n\t•\tJetBrains IDEs: use the built‑in terminal.\n\t•\tAny editor with a terminal pane (e.g., Sublime Text, Emacs, Vim tmux splits).\n\t4.\tCloud‑Hosted Terminals\n\t•\tGitHub Codespaces or Gitpod: pre‑configured dev environments—just add Codex to your dotfiles or install at project startup.\n\t•\tCloud Shells: Google Cloud Shell, AWS CloudShell, or Azure Cloud Shell all support npm and can run Codex CLI directly.\n\t5.\tRemote Servers / SSH\n\t•\tSSH into a Linux VM or bare‑metal server, install Node.js + Codex, and run just as you would locally.\n\t•\tUseful for heavier compute or shared team environments.\n\t6.\tContinuous Integration / CI Pipelines\n\t•\tGitHub Actions, GitLab CI, CircleCI, Jenkins, etc.\n\t•\tRun headlessly with flags like --approval-mode auto-edit --quiet to apply edits or generate artifacts in your build workflow.\n\t7.\tAutomated Scripts & Cron Jobs\n\t•\tEmbed Codex CLI commands in shell scripts for routine tasks (e.g., updating docs, lint fixes) and schedule via cron or task runners.\n\n\nCollaborate with Your Code\n\n•\tAsk for explanations:\n\ncodex \"Explain the purpose of src/utils.js\"\n\n\t•\tGenerate edits:\n\ncodex --approval-mode suggest \"Refactor the authentication logic into a separate module\"\n\n\n\t•\tApply fixes automatically:\n\ncodex --approval-mode auto-edit \"Fix lint errors in src/\"\n\n\nWorkflow Tips\n\t•\tKeep one terminal for coding, testing, and git commands; use the other exclusively for Codex prompts.\n\t•\tIf Codex suggests edits, you’ll see a diff in the REPL—approve or reject each change.\n\t•\tYou can also run one‑off prompts without entering the REPL:\n\n\ncodex \"Add JSDoc comments to all functions in lib/\"\n\n\n\n\n\ncodex --help\n\nGitHub Discussions & Issues: https://github.com/openai/codex  \n\n\n\n\n\n\n\n\n",
  "source_type": "text_file"
}